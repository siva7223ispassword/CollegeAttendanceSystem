package com.college.studentapp.activities

import android.os.Bundle
import android.widget.TextView
import androidx.appcompat.app.AppCompatActivity
import com.college.studentapp.R
import com.college.studentapp.utils.FirebaseUtils

class AttendanceSummaryActivity : AppCompatActivity() {

    private lateinit var tvAttendanceSummary: TextView

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_attendance_summary)

        tvAttendanceSummary = findViewById(R.id.tvAttendanceSummary)

        FirebaseUtils.getAttendanceReference("310123104094").get().addOnSuccessListener { snapshot ->
            val summary = StringBuilder()
            snapshot.children.forEach { periodSnapshot ->
                val period = periodSnapshot.key
                val status = periodSnapshot.getValue(String::class.java)
                summary.append("Period $period: $status\n")
            }
            tvAttendanceSummary.text = summary.toString()
        }.addOnFailureListener {
            tvAttendanceSummary.text = "Failed to load attendance data."
        }
    }
}

package com.college.studentapp.activities

import android.os.Bundle
import android.widget.TextView
import androidx.appcompat.app.AppCompatActivity
import com.college.studentapp.R
import com.college.studentapp.utils.FirebaseUtils

class EndOfDaySummaryActivity : AppCompatActivity() {

    private lateinit var tvSummary: TextView

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_end_of_day_summary)

        tvSummary = findViewById(R.id.tvSummary)

        // Fetch attendance for today
        val todayDate = "2025-04-14" // Replace with dynamic date logic
        FirebaseUtils.getAttendanceReference("310123104094").child(todayDate).get()
            .addOnSuccessListener { snapshot ->
                val summary = StringBuilder()
                snapshot.children.forEach { periodSnapshot ->
                    val periodNumber = periodSnapshot.key
                    val status = periodSnapshot.getValue(String::class.java)
                    summary.append("Period $periodNumber: $status\n")
                }
                tvSummary.text = summary.toString()
            }
            .addOnFailureListener {
                tvSummary.text = "Failed to load summary."
            }
    }
}

package com.college.studentapp.activities

import android.content.Intent
import android.os.Bundle
import android.widget.Button
import android.widget.EditText
import android.widget.Toast
import androidx.appcompat.app.AppCompatActivity
import com.college.studentapp.R
import com.college.studentapp.utils.FirebaseUtils

class LoginActivity : AppCompatActivity() {

    private lateinit var etStudentID: EditText
    private lateinit var etPassword: EditText
    private lateinit var btnLogin: Button

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_login)

        etStudentID = findViewById(R.id.etStudentID)
        etPassword = findViewById(R.id.etPassword)
        btnLogin = findViewById(R.id.btnLogin)

        btnLogin.setOnClickListener {
            val studentID = etStudentID.text.toString()
            val password = etPassword.text.toString()

            if (FirebaseUtils.loginStudent(studentID, password)) {
                val intent = Intent(this, MainActivity::class.java)
                startActivity(intent)
                finish()
            } else {
                Toast.makeText(this, "Invalid login credentials", Toast.LENGTH_SHORT).show()
            }
        }
    }
}

package com.college.studentapp.activities

import android.content.Intent
import android.os.Bundle
import android.widget.Button
import androidx.appcompat.app.AppCompatActivity
import com.college.studentapp.R

class MainActivity : AppCompatActivity() {

    private lateinit var btnViewAttendanceSummary: Button
    private lateinit var btnEndOfDaySummary: Button

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        btnViewAttendanceSummary = findViewById(R.id.btnViewAttendanceSummary)
        btnEndOfDaySummary = findViewById(R.id.btnEndOfDaySummary)

        btnViewAttendanceSummary.setOnClickListener {
            val intent = Intent(this, AttendanceSummaryActivity::class.java)
            startActivity(intent)
        }

        btnEndOfDaySummary.setOnClickListener {
            val intent = Intent(this, EndOfDaySummaryActivity::class.java)
            startActivity(intent)
        }
    }
}

package com.college.studentapp.services

import android.Manifest
import android.app.NotificationChannel
import android.app.NotificationManager
import android.app.Service
import android.content.Context
import android.content.Intent
import android.os.Build
import android.os.IBinder
import android.widget.Toast
import androidx.core.app.NotificationCompat
import androidx.core.content.ContextCompat
import android.content.pm.PackageManager

class PrePeriodNotificationService : Service() {

    private val CHANNEL_ID = "PrePeriodAlertsChannel"

    override fun onCreate() {
        super.onCreate()
        createNotificationChannel()
    }

    override fun onStartCommand(intent: Intent?, flags: Int, startId: Int): Int {
        showNotification("Upcoming Period", "Your next period starts in 10 minutes.")
        return START_NOT_STICKY
    }

    override fun onBind(intent: Intent?): IBinder? = null

    private fun createNotificationChannel() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            val channel = NotificationChannel(
                CHANNEL_ID,
                "Pre-Period Alerts",
                NotificationManager.IMPORTANCE_HIGH
            )
            val notificationManager = ContextCompat.getSystemService(
                this, NotificationManager::class.java
            )
            notificationManager?.createNotificationChannel(channel)
        }
    }

    private fun showNotification(title: String, message: String) {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {
            if (ContextCompat.checkSelfPermission(
                    this, Manifest.permission.POST_NOTIFICATIONS
                ) != PackageManager.PERMISSION_GRANTED
            ) {
                Toast.makeText(this, "Notification permission not granted.", Toast.LENGTH_SHORT).show()
                return
            }
        }

        val notification = NotificationCompat.Builder(this, CHANNEL_ID)
            .setSmallIcon(android.R.drawable.ic_dialog_info)
            .setContentTitle(title)
            .setContentText(message)
            .setPriority(NotificationCompat.PRIORITY_HIGH)
            .build()

        val notificationManager = ContextCompat.getSystemService(
            this, NotificationManager::class.java
        )
        notificationManager?.notify((System.currentTimeMillis() % Int.MAX_VALUE).toInt(), notification)
    }
}

package com.college.studentapp.services

import android.Manifest
import android.app.Service
import android.content.Intent
import android.content.pm.PackageManager
import android.net.wifi.ScanResult
import android.net.wifi.WifiManager
import android.os.IBinder
import android.widget.Toast
import androidx.core.content.ContextCompat
import com.college.studentapp.utils.FirebaseUtils

class WiFiDetectionService : Service() {

    override fun onStartCommand(intent: Intent?, flags: Int, startId: Int): Int {
        detectStaffWiFi()
        return START_STICKY
    }

    private fun detectStaffWiFi() {
        val wifiManager = applicationContext.getSystemService(WIFI_SERVICE) as WifiManager

        if (ContextCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION)
            != PackageManager.PERMISSION_GRANTED) {
            Toast.makeText(this, "Location permission not granted", Toast.LENGTH_SHORT).show()
            stopSelf()
            return
        }

        try {
            wifiManager.startScan()
            val results: List<ScanResult> = wifiManager.scanResults
            for (result in results) {
                if (result.SSID.matches(Regex("ATT_.*"))) {
                    sendAttendancePacket(result.SSID)
                }
            }
        } catch (e: SecurityException) {
            e.printStackTrace()
            Toast.makeText(this, "Permission denied for Wi-Fi scan", Toast.LENGTH_SHORT).show()
        }
    }

    private fun sendAttendancePacket(ssid: String) {
        val studentID = "310123104094" // Replace with actual logged-in student ID
        FirebaseUtils.getAttendanceReference(studentID).child(ssid).setValue("Present")
    }

    override fun onBind(intent: Intent?): IBinder? = null
}

package com.college.studentapp.ui.theme

import androidx.compose.ui.graphics.Color

val Purple80 = Color(0xFFD0BCFF)
val PurpleGrey80 = Color(0xFFCCC2DC)
val Pink80 = Color(0xFFEFB8C8)
val Purple40 = Color(0xFF6650a4)
val PurpleGrey40 = Color(0xFF625b71)
val Pink40 = Color(0xFF7D5260)


package com.college.studentapp.ui.theme

import android.os.Build
import androidx.compose.foundation.isSystemInDarkTheme
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.darkColorScheme
import androidx.compose.material3.dynamicDarkColorScheme
import androidx.compose.material3.dynamicLightColorScheme
import androidx.compose.material3.lightColorScheme
import androidx.compose.runtime.Composable
import androidx.compose.ui.platform.LocalContext

private val DarkColorScheme = darkColorScheme(
    primary = Purple80,
    secondary = PurpleGrey80,
    tertiary = Pink80
)

private val LightColorScheme = lightColorScheme(
    primary = Purple40,
    secondary = PurpleGrey40,
    tertiary = Pink40
)

@Composable
fun StudentAppTheme(
    darkTheme: Boolean = isSystemInDarkTheme(),
    dynamicColor: Boolean = true,
    content: @Composable () -> Unit
) {
    val colorScheme = when {
        dynamicColor && Build.VERSION.SDK_INT >= Build.VERSION_CODES.S -> {
            val context = LocalContext.current
            if (darkTheme) dynamicDarkColorScheme(context) else dynamicLightColorScheme(context)
        }
        darkTheme -> DarkColorScheme
        else -> LightColorScheme
    }

    MaterialTheme(
        colorScheme = colorScheme,
        typography = Typography,
        content = content
    )
}

package com.college.studentapp.ui.theme

import androidx.compose.material3.Typography
import androidx.compose.ui.text.TextStyle
import androidx.compose.ui.text.font.FontFamily
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.sp

val Typography = Typography(
    bodyLarge = TextStyle(
        fontFamily = FontFamily.Default,
        fontWeight = FontWeight.Normal,
        fontSize = 16.sp,
        lineHeight = 24.sp,
        letterSpacing = 0.5.sp
    )
)

package com.college.studentapp.utils

import android.content.Context
import android.provider.Settings
import com.google.firebase.database.DatabaseReference
import com.google.firebase.database.FirebaseDatabase

object DeviceBindingHelper {

    private val database: DatabaseReference = FirebaseDatabase.getInstance().reference

    /**
     * Binds the device to the student's ID in the database.
     */
    fun bindDeviceToStudent(context: Context, studentID: String, onSuccess: () -> Unit, onFailure: (String) -> Unit) {
        val uniqueDeviceID = getDeviceID(context)

        database.child("students").child(studentID).child("deviceID").setValue(uniqueDeviceID)
            .addOnSuccessListener {
                onSuccess()
            }
            .addOnFailureListener {
                onFailure(it.message ?: "Failed to bind device")
            }
    }

    /**
     * Verifies if the current device is bound to the student's ID.
     */
    fun verifyDeviceBinding(context: Context, studentID: String, onVerificationComplete: (Boolean) -> Unit) {
        val uniqueDeviceID = getDeviceID(context)

        database.child("students").child(studentID).child("deviceID").get()
            .addOnSuccessListener { snapshot ->
                val boundDeviceID = snapshot.getValue(String::class.java)
                onVerificationComplete(boundDeviceID == uniqueDeviceID)
            }
            .addOnFailureListener {
                onVerificationComplete(false)
            }
    }

    /**
     * Generates a unique device ID based on the device's Android ID.
     */
    private fun getDeviceID(context: Context): String {
        return Settings.Secure.getString(context.contentResolver, Settings.Secure.ANDROID_ID)
    }
}


package com.college.studentapp.utils

import com.google.firebase.database.DatabaseReference
import com.google.firebase.database.FirebaseDatabase

object FirebaseUtils {
    private val database: DatabaseReference = FirebaseDatabase.getInstance().reference

    fun loginStudent(studentID: String, password: String): Boolean {
        // Add actual authentication logic here - currently hardcoded for demo
        return studentID == "310123104094" && password == "23UCSE93"
    }

    fun getAttendanceReference(studentID: String): DatabaseReference {
        return database.child("attendance").child(studentID)
    }
}

package com.college.studentapp.utils

import android.Manifest
import android.app.PendingIntent
import android.content.Context
import android.content.Intent
import android.content.pm.PackageManager
import androidx.core.app.ActivityCompat
import com.college.studentapp.services.WiFiDetectionService
import com.google.android.gms.location.Geofence
import com.google.android.gms.location.GeofencingClient
import com.google.android.gms.location.GeofencingRequest
import com.google.android.gms.location.LocationServices

class GeofencingManager(private val context: Context) {

    private val geofencingClient: GeofencingClient = LocationServices.getGeofencingClient(context)

    fun addCampusGeofence() {
        // Ensure location permission has been granted
        if (ActivityCompat.checkSelfPermission(
                context,
                Manifest.permission.ACCESS_FINE_LOCATION
            ) != PackageManager.PERMISSION_GRANTED
        ) {
            println("Location permission not granted. Cannot add geofence.")
            return
        }

        val geofence = Geofence.Builder()
            .setRequestId("CampusGeofence")
            .setCircularRegion(12.818573, 80.227850, 100f)
            .setTransitionTypes(Geofence.GEOFENCE_TRANSITION_ENTER)
            .setExpirationDuration(Geofence.NEVER_EXPIRE)
            .build()

        val geofencingRequest = GeofencingRequest.Builder()
            .setInitialTrigger(GeofencingRequest.INITIAL_TRIGGER_ENTER)
            .addGeofence(geofence)
            .build()

        geofencingClient.addGeofences(geofencingRequest, getPendingIntent())
            .addOnSuccessListener { println("Geofence added successfully.") }
            .addOnFailureListener { e -> println("Failed to add geofence: ${e.message}") }
    }

    private fun getPendingIntent(): PendingIntent {
        val intent = Intent(context, WiFiDetectionService::class.java)
        return PendingIntent.getService(
            context,
            0,
            intent,
            PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE
        )
    }
}

package com.college.studentapp

import android.content.Intent
import android.os.Bundle
import androidx.appcompat.app.AppCompatActivity
import com.college.studentapp.activities.LoginActivity

class MainActivity : AppCompatActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        // Immediately route to login
        startActivity(Intent(this, LoginActivity::class.java))
        finish()
    }
}

drawable\
<!--ic_launcher.xml-->
<layer-list xmlns:android="http://schemas.android.com/apk/res/android">
    <item>
        <bitmap
            android:gravity="center"
            android:src="@drawable/ic_launcher_foreground" />
    </item>
</layer-list>
<!-- ic_launcher_background.xml -->
<?xml version="1.0" encoding="utf-8"?>
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="108dp"
    android:height="108dp"
    android:viewportWidth="108"
    android:viewportHeight="108">
    <path
        android:fillColor="#3DDC84"
        android:pathData="M0,0h108v108h-108z" />
    <path
        android:fillColor="#00000000"
        android:pathData="M9,0L9,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,0L19,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M29,0L29,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M39,0L39,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M49,0L49,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M59,0L59,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M69,0L69,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M79,0L79,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M89,0L89,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M99,0L99,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,9L108,9"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,19L108,19"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,29L108,29"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,39L108,39"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,49L108,49"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,59L108,59"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,69L108,69"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,79L108,79"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,89L108,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,99L108,99"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,29L89,29"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,39L89,39"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,49L89,49"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,59L89,59"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,69L89,69"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,79L89,79"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M29,19L29,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M39,19L39,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M49,19L49,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M59,19L59,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M69,19L69,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M79,19L79,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
</vector>
<!--ic_launcher_foreground.xml-->
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:aapt="http://schemas.android.com/aapt"
    android:width="108dp"
    android:height="108dp"
    android:viewportWidth="108"
    android:viewportHeight="108">
    <path android:pathData="M31,63.928c0,0 6.4,-11 12.1,-13.1c7.2,-2.6 26,-1.4 26,-1.4l38.1,38.1L107,108.928l-32,-1L31,63.928z">
        <aapt:attr name="android:fillColor">
            <gradient
                android:endX="85.84757"
                android:endY="92.4963"
                android:startX="42.9492"
                android:startY="49.59793"
                android:type="linear">
                <item
                    android:color="#44000000"
                    android:offset="0.0" />
                <item
                    android:color="#00000000"
                    android:offset="1.0" />
            </gradient>
        </aapt:attr>
    </path>
    <path
        android:fillColor="#FFFFFF"
        android:fillType="nonZero"
        android:pathData="M65.3,45.828l3.8,-6.6c0.2,-0.4 0.1,-0.9 -0.3,-1.1c-0.4,-0.2 -0.9,-0.1 -1.1,0.3l-3.9,6.7c-6.3,-2.8 -13.4,-2.8 -19.7,0l-3.9,-6.7c-0.2,-0.4 -0.7,-0.5 -1.1,-0.3C38.8,38.328 38.7,38.828 38.9,39.228l3.8,6.6C36.2,49.428 31.7,56.028 31,63.928h46C76.3,56.028 71.8,49.428 65.3,45.828zM43.4,57.328c-0.8,0 -1.5,-0.5 -1.8,-1.2c-0.3,-0.7 -0.1,-1.5 0.4,-2.1c0.5,-0.5 1.4,-0.7 2.1,-0.4c0.7,0.3 1.2,1 1.2,1.8C45.3,56.528 44.5,57.328 43.4,57.328L43.4,57.328zM64.6,57.328c-0.8,0 -1.5,-0.5 -1.8,-1.2s-0.1,-1.5 0.4,-2.1c0.5,-0.5 1.4,-0.7 2.1,-0.4c0.7,0.3 1.2,1 1.2,1.8C66.5,56.528 65.6,57.328 64.6,57.328L64.6,57.328z"
        android:strokeWidth="1"
        android:strokeColor="#00000000" />
</vector>
<!--ic_launcher_round-->
<layer-list xmlns:android="http://schemas.android.com/apk/res/android">
    <item>
        <bitmap
            android:gravity="center"
            android:src="@drawable/ic_launcher_foreground" />
    </item>
</layer-list>
<!--ic_notification.xml-->
<vector xmlns:android="http://schemas.android.com/apk/res/android" android:autoMirrored="true" android:height="24dp" android:tint="#000000" android:viewportHeight="24" android:viewportWidth="24" android:width="24dp">
      
    <path android:fillColor="@android:color/white" android:pathData="M10.01,21.01c0,1.1 0.89,1.99 1.99,1.99s1.99,-0.89 1.99,-1.99h-3.98zM18.88,16.82L18.88,11c0,-3.25 -2.25,-5.97 -5.29,-6.69v-0.72C13.59,2.71 12.88,2 12,2s-1.59,0.71 -1.59,1.59v0.72C7.37,5.03 5.12,7.75 5.12,11v5.82L3,18.94L3,20h18v-1.06l-2.12,-2.12zM16,13.01h-3v3h-2v-3L8,13.01L8,11h3L11,8h2v3h3v2.01z"/>
    
</vector>

layout\
<!--activity_attendance_summary.xml-->
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    android:gravity="center"
    android:padding="32dp">

    <TextView
        android:id="@+id/tvAttendanceSummary"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="Attendance Summary"
        android:textAppearance="?attr/textAppearanceHeadlineMedium"/>
</LinearLayout>
<!--activity_end_of_day_summary&ndash;&gt;-->
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    android:gravity="center"
    android:padding="32dp">

    <TextView
        android:id="@+id/tvSummary"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="End of Day Summary"
        android:textAppearance="?attr/textAppearanceHeadlineMedium"/>
</LinearLayout>
<!--activity_login.xml-->
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    android:padding="16dp">

    <EditText
        android:id="@+id/etStudentID"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:hint="Student ID"
        android:minHeight="48dp"
        android:paddingVertical="12dp"
        android:inputType="text" />

    <EditText
        android:id="@+id/etPassword"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:hint="Password"
        android:inputType="textPassword"
        android:minHeight="48dp"
        android:paddingVertical="12dp" />

    <Button
        android:id="@+id/btnLogin"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="Login" />
</LinearLayout>
<!--activity_main.xml-->
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    android:gravity="center"
    android:padding="32dp">

    <Button
        android:id="@+id/btnViewAttendanceSummary"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="Attendance Summary"/>

    <Button
        android:id="@+id/btnEndOfDaySummary"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="End of Day Summary"
        android:layout_marginTop="16dp"/>
</LinearLayout>

values\
<!--activity_attendance_summary-->
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    android:gravity="center"
    android:padding="32dp">

    <TextView
        android:id="@+id/tvAttendanceSummary"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="Attendance Summary"
        android:textAppearance="?attr/textAppearanceHeadlineMedium"/>
</LinearLayout>
<resources>
    <string name="app_name">StudentApp</string>
</resources>
<resources xmlns:tools="http://schemas.android.com/tools">
    <style name="Theme.StudentApp" parent="Theme.Material3.DayNight.NoActionBar">
        <item name="android:windowBackground">@color/white</item>
    </style>
</resources>
<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    package="com.college.studentapp">


    <!-- Permissions -->
    <uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" />
    <uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION" />
    <uses-permission android:name="android.permission.ACCESS_WIFI_STATE" />
    <uses-permission android:name="android.permission.CHANGE_WIFI_STATE" />
    <uses-permission android:name="android.permission.INTERNET" />

    <uses-permission android:name="android.permission.FOREGROUND_SERVICE" />
    <uses-permission android:name="android.permission.POST_NOTIFICATIONS" />

    <application
        android:allowBackup="true"
        android:icon="@drawable/ic_launcher"
        android:roundIcon="@drawable/ic_launcher_round"
        android:label="@string/app_name"
        android:theme="@style/Theme.StudentApp"
        tools:targetApi="34">

        <!-- Launcher Activity -->
        <activity
            android:name=".activities.LoginActivity"
            android:exported="true">
            <intent-filter>
                <action android:name="android.intent.action.MAIN"/>
                <category android:name="android.intent.category.LAUNCHER"/>
            </intent-filter>
        </activity>
        <activity android:name=".activities.MainActivity"/>
        <activity android:name=".activities.AttendanceSummaryActivity"/>
        <activity android:name=".activities.EndOfDaySummaryActivity"/>

        <service
            android:name=".services.WiFiDetectionService"
            android:exported="false"/>
        <service
            android:name=".services.PrePeriodNotificationService"
            android:exported="false"/>
    </application>
</manifest>
plugins {
    id("com.android.application")
    id("com.google.gms.google-services")
    id("org.jetbrains.kotlin.android")
}

android {
    namespace = "com.college.studentapp"
    compileSdk = 34

    defaultConfig {
        applicationId = "com.college.studentapp"
        minSdk = 26
        targetSdk = 34
        versionCode = 1
        versionName = "1.0"
        testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
    }

    buildTypes {
        release {
            isMinifyEnabled = true
            isShrinkResources = true
            proguardFiles(
                getDefaultProguardFile("proguard-android-optimize.txt"),
                "proguard-rules.pro"
            )
        }
        debug {
            applicationIdSuffix = ".debug"
            isDebuggable = true
        }
    }

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
        isCoreLibraryDesugaringEnabled = true
    }

    kotlinOptions {
        jvmTarget = "17"
    }

    buildFeatures {
        compose = true
        viewBinding = true
        buildConfig = true
    }

    composeOptions {
        kotlinCompilerExtensionVersion = "1.5.10"
    }
}

dependencies {
    // Core Android
    implementation("androidx.core:core-ktx:1.12.0")
    implementation("androidx.appcompat:appcompat:1.6.1")
    implementation("com.google.android.material:material:1.11.0")

    // Jetpack Compose
    implementation(platform("androidx.compose:compose-bom:2023.10.01"))
    implementation("androidx.compose.ui:ui")
    implementation("androidx.compose.material3:material3")
    implementation("androidx.compose.ui:ui-tooling-preview")
    implementation("androidx.activity:activity-compose:1.8.2")
    debugImplementation("androidx.compose.ui:ui-tooling")

    // Firebase
    implementation(platform("com.google.firebase:firebase-bom:32.7.0"))
    implementation("com.google.firebase:firebase-auth")
    implementation("com.google.firebase:firebase-database")

    // Location Services
    implementation("com.google.android.gms:play-services-location:21.2.0")

    // Lifecycle & Coroutines
    implementation("androidx.lifecycle:lifecycle-runtime-ktx:2.7.0")
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-android:1.7.3")

    // Desugaring
    coreLibraryDesugaring("com.android.tools:desugar_jdk_libs:2.0.4")
}
-keepattributes Signature
-keepattributes *Annotation*
-keep class com.google.firebase.** { *; }
-keep class com.google.android.gms.** { *; }
-dontnote com.google.**
-dontwarn com.google.**
-keep class androidx.compose.runtime.** { *; }
-keep class kotlin.Metadata { *; }
-dontwarn org.jetbrains.annotations.**
-keep class com.college.studentapp.** { *; }

distributionBase=GRADLE_USER_HOME
distributionPath=wrapper/dists
distributionUrl=https\://services.gradle.org/distributions/gradle-8.4-bin.zip
networkTimeout=10000
validateDistributionUrl=true
zipStoreBase=GRADLE_USER_HOME
zipStorePath=wrapper/dists

// Top-level build.gradle.kts
buildscript {
    repositories {
        google()
        mavenCentral()
    }
    dependencies {
        classpath("com.android.tools.build:gradle:8.3.1")
        classpath("com.google.gms:google-services:4.4.1")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:1.9.22")
    }
}

tasks.register("clean", Delete::class) {
    delete(project.layout.buildDirectory)
}

org.gradle.jvmargs=-Xmx2048m -Dfile.encoding=UTF-8
android.useAndroidX=true
kotlin.code.style=official
android.suppressUnsupportedCompileSdk=34

pluginManagement {
    repositories {
        google()
        mavenCentral()
        gradlePluginPortal()
    }
}

dependencyResolutionManagement {
    repositoriesMode.set(RepositoriesMode.PREFER_SETTINGS)
    repositories {
        google()
        mavenCentral()
    }
}

rootProject.name = "StudentApp"
include(":app")

{
  "project_info": {
    "project_number": "587283484150",
    "firebase_url": "https://collegeattendancesystem-4a3cd-default-rtdb.firebaseio.com",
    "project_id": "collegeattendancesystem-4a3cd",
    "storage_bucket": "collegeattendancesystem-4a3cd.firebasestorage.app"
  },
  "client": [
    {
      "client_info": {
        "mobilesdk_app_id": "1:587283484150:android:7929f484908e9136228bd7",
        "android_client_info": {
          "package_name": "com.college.staffapp"
        }
      },
      "oauth_client": [],
      "api_key": [
        {
          "current_key": "AIzaSyDoglltbTeavKihmbBkE5me6IQQfGhco_M"
        }
      ],
      "services": {
        "appinvite_service": {
          "other_platform_oauth_client": []
        }
      }
    },
    {
      "client_info": {
        "mobilesdk_app_id": "1:587283484150:android:0b7da0a54a52a64c228bd7",
        "android_client_info": {
          "package_name": "com.college.studentapp"
        }
      },
      "oauth_client": [],
      "api_key": [
        {
          "current_key": "AIzaSyDoglltbTeavKihmbBkE5me6IQQfGhco_M"
        }
      ],
      "services": {
        "appinvite_service": {
          "other_platform_oauth_client": []
        }
      }
    },
    {
      "client_info": {
        "mobilesdk_app_id": "1:587283484150:android:b86c1254e03ca199228bd7",
        "android_client_info": {
          "package_name": "com.college.studentapp.debug"
        }
      },
      "oauth_client": [],
      "api_key": [
        {
          "current_key": "AIzaSyDoglltbTeavKihmbBkE5me6IQQfGhco_M"
        }
      ],
      "services": {
        "appinvite_service": {
          "other_platform_oauth_client": []
        }
      }
    }
  ],
  "configuration_version": "1"
}



staffapp:
package com.college.staffapp.activities

import android.os.Bundle
import android.widget.TextView
import androidx.appcompat.app.AppCompatActivity
import com.college.staffapp.R
import com.college.staffapp.utils.FirebaseUtils

class AttendanceLogsActivity : AppCompatActivity() {

    private lateinit var tvLogs: TextView

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_attendance_logs)

        tvLogs = findViewById(R.id.tvLogs)

        // Fetch attendance logs
        FirebaseUtils.getAttendanceLogs().get().addOnSuccessListener { snapshot ->
            val logs = StringBuilder()
            snapshot.children.forEach { daySnapshot ->
                val date = daySnapshot.key
                logs.append("$date:\n")
                daySnapshot.children.forEach { periodSnapshot ->
                    val period = periodSnapshot.key
                    logs.append("  Period $period: ${periodSnapshot.value}\n")
                }
            }
            tvLogs.text = logs.toString()
        }.addOnFailureListener {
            tvLogs.text = "Failed to load logs."
        }
    }
}
package com.college.staffapp.activities

import android.content.Intent
import android.os.Bundle
import android.widget.Button
import androidx.appcompat.app.AppCompatActivity
import com.college.staffapp.R

class DashboardActivity : AppCompatActivity() {

    private lateinit var btnAttendanceLogs: Button
    private lateinit var btnTimetableEditor: Button
    private lateinit var btnStartHotspot: Button

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_dashboard)

        btnAttendanceLogs = findViewById(R.id.btnAttendanceLogs)
        btnTimetableEditor = findViewById(R.id.btnTimetableEditor)
        btnStartHotspot = findViewById(R.id.btnStartHotspot)

        btnAttendanceLogs.setOnClickListener {
            startActivity(Intent(this, AttendanceLogsActivity::class.java))
        }

        btnTimetableEditor.setOnClickListener {
            startActivity(Intent(this, TimetableEditorActivity::class.java))
        }

        btnStartHotspot.setOnClickListener {
            startService(Intent(this, com.college.staffapp.services.HotspotService::class.java))
        }
    }
}
package com.college.staffapp.activities

import android.content.Intent
import android.os.Bundle
import android.widget.Button
import android.widget.EditText
import android.widget.Toast
import androidx.appcompat.app.AppCompatActivity
import com.college.staffapp.R
import com.google.firebase.FirebaseException
import com.google.firebase.auth.*
import java.util.concurrent.TimeUnit

class LoginActivity : AppCompatActivity() {

    private lateinit var etPhoneNumber: EditText
    private lateinit var etOTP: EditText
    private lateinit var btnSendOTP: Button
    private lateinit var btnVerifyOTP: Button

    private lateinit var auth: FirebaseAuth
    private var storedVerificationId: String? = null
    private lateinit var resendToken: PhoneAuthProvider.ForceResendingToken

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_login)

        etPhoneNumber = findViewById(R.id.etPhoneNumber)
        etOTP = findViewById(R.id.etOTP)
        btnSendOTP = findViewById(R.id.btnSendOTP)
        btnVerifyOTP = findViewById(R.id.btnVerifyOTP)

        auth = FirebaseAuth.getInstance()

        btnSendOTP.setOnClickListener {
            val phoneNumber = etPhoneNumber.text.toString().trim()
            if (phoneNumber.isNotEmpty()) {
                startPhoneNumberVerification("+91$phoneNumber") // Change country code if needed
            } else {
                Toast.makeText(this, "Enter phone number", Toast.LENGTH_SHORT).show()
            }
        }

        btnVerifyOTP.setOnClickListener {
            val otp = etOTP.text.toString().trim()
            if (otp.isNotEmpty() && storedVerificationId != null) {
                verifyPhoneNumberWithCode(otp)
            } else {
                Toast.makeText(this, "Enter OTP", Toast.LENGTH_SHORT).show()
            }
        }
    }

    private fun startPhoneNumberVerification(phoneNumber: String) {
        val options = PhoneAuthOptions.newBuilder(auth)
            .setPhoneNumber(phoneNumber)
            .setTimeout(60L, TimeUnit.SECONDS)
            .setActivity(this)
            .setCallbacks(object : PhoneAuthProvider.OnVerificationStateChangedCallbacks() {
                override fun onVerificationCompleted(credential: PhoneAuthCredential) {
                    signInWithPhoneAuthCredential(credential)
                }

                override fun onVerificationFailed(e: FirebaseException) {
                    Toast.makeText(this@LoginActivity, "Verification Failed: ${e.localizedMessage}", Toast.LENGTH_LONG).show()
                }

                override fun onCodeSent(verificationId: String, token: PhoneAuthProvider.ForceResendingToken) {
                    storedVerificationId = verificationId
                    resendToken = token
                    Toast.makeText(this@LoginActivity, "OTP sent successfully", Toast.LENGTH_SHORT).show()
                }
            })
            .build()
        PhoneAuthProvider.verifyPhoneNumber(options)
    }

    private fun verifyPhoneNumberWithCode(code: String) {
        val credential = PhoneAuthProvider.getCredential(storedVerificationId!!, code)
        signInWithPhoneAuthCredential(credential)
    }

    private fun signInWithPhoneAuthCredential(credential: PhoneAuthCredential) {
        auth.signInWithCredential(credential)
            .addOnCompleteListener(this) { task ->
                if (task.isSuccessful) {
                    startActivity(Intent(this, DashboardActivity::class.java))
                    finish()
                } else {
                    Toast.makeText(this, "Login failed: ${task.exception?.localizedMessage}", Toast.LENGTH_SHORT).show()
                }
            }
    }
}
package com.college.staffapp.activities

import android.os.Bundle
import android.widget.Button
import android.widget.EditText
import android.widget.Toast
import androidx.appcompat.app.AppCompatActivity
import com.college.staffapp.R
import com.college.staffapp.utils.FirebaseUtils

class TimetableEditorActivity : AppCompatActivity() {

    private lateinit var etDay: EditText
    private lateinit var etPeriod: EditText
    private lateinit var etSubject: EditText
    private lateinit var etRoom: EditText
    private lateinit var btnSaveTimetable: Button

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_timetable_editor)

        etDay = findViewById(R.id.etDay)
        etPeriod = findViewById(R.id.etPeriod)
        etSubject = findViewById(R.id.etSubject)
        etRoom = findViewById(R.id.etRoom)
        btnSaveTimetable = findViewById(R.id.btnSaveTimetable)

        btnSaveTimetable.setOnClickListener {
            val day = etDay.text.toString()
            val period = etPeriod.text.toString()
            val subject = etSubject.text.toString()
            val room = etRoom.text.toString()

            if (day.isNotEmpty() && period.isNotEmpty() && subject.isNotEmpty() && room.isNotEmpty()) {
                FirebaseUtils.updateTimetable(day, period, subject, room)
                Toast.makeText(this, "Timetable updated successfully!", Toast.LENGTH_SHORT).show()
                clearFields()
            } else {
                Toast.makeText(this, "Please fill all fields!", Toast.LENGTH_SHORT).show()
            }
        }
    }

    private fun clearFields() {
        etDay.text.clear()
        etPeriod.text.clear()
        etSubject.text.clear()
        etRoom.text.clear()
    }
}
package com.college.staffapp.services

import android.os.Handler
import com.college.staffapp.utils.FirebaseUtils

class AttendanceScanner {

    private val handler = Handler()

    fun startAttendanceScanning(periodID: String) {
        handler.postDelayed({
            // Simulate scanning nearby devices
            val scannedStudentIDs = listOf("310123104094", "310123104095", "310123104096")
            markAttendance(periodID, scannedStudentIDs)
        }, 10 * 60 * 1000) // First 10 minutes of the period
    }

    private fun markAttendance(periodID: String, studentIDs: List<String>) {
        studentIDs.forEach { studentID ->
            FirebaseUtils.getAttendanceLogs()
                .child(periodID)
                .child(studentID)
                .setValue("Present")
        }
    }
}

package com.college.staffapp.services

import android.Manifest
import android.app.Service
import android.content.Intent
import android.content.pm.PackageManager
import android.net.wifi.WifiManager
import android.os.Build
import android.os.IBinder
import android.util.Log
import androidx.core.app.ActivityCompat

class HotspotService : Service() {

    override fun onStartCommand(intent: Intent?, flags: Int, startId: Int): Int {
        val subject = "CS351-IOS"
        val time = "08:30AM"

        if (hasPermission()) {
            try {
                startDynamicHotspot(subject, time)
            } catch (e: SecurityException) {
                Log.e("HotspotService", "SecurityException: ${e.message}")
                stopSelf()
            }
        } else {
            Log.e("HotspotService", "NEARBY_WIFI_DEVICES permission not granted.")
            stopSelf()
        }

        return START_STICKY
    }

    private fun hasPermission(): Boolean {
        return if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {
            checkSelfPermission(
                Manifest.permission.NEARBY_WIFI_DEVICES
            ) == PackageManager.PERMISSION_GRANTED
        } else {
            true
        }
    }

    private fun startDynamicHotspot(subject: String, time: String) {
        val ssid = "ATT_${subject}_$time".replace(" ", "_")
        val wifiManager = applicationContext.getSystemService(WIFI_SERVICE) as WifiManager

        try {
            wifiManager.startLocalOnlyHotspot(object : WifiManager.LocalOnlyHotspotCallback() {
                override fun onStarted(reservation: WifiManager.LocalOnlyHotspotReservation?) {
                    super.onStarted(reservation)
                    Log.d("HotspotService", "Hotspot started with SSID: $ssid")
                }

                override fun onFailed(reason: Int) {
                    super.onFailed(reason)
                    Log.e("HotspotService", "Hotspot failed to start. Reason: $reason")
                }
            }, null)
        } catch (e: SecurityException) {
            Log.e("HotspotService", "startLocalOnlyHotspot SecurityException: ${e.message}")
            stopSelf()
        }
    }

    override fun onBind(intent: Intent?): IBinder? = null
}

package com.college.staffapp.ui.theme

import androidx.compose.ui.graphics.Color

val Purple80 = Color(0xFFD0BCFF)
val PurpleGrey80 = Color(0xFFCCC2DC)
val Pink80 = Color(0xFFEFB8C8)
val Purple40 = Color(0xFF6650a4)
val PurpleGrey40 = Color(0xFF625b71)
val Pink40 = Color(0xFF7D5260)

package com.college.staffapp.ui.theme

import android.os.Build
import androidx.compose.foundation.isSystemInDarkTheme
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.darkColorScheme
import androidx.compose.material3.dynamicDarkColorScheme
import androidx.compose.material3.dynamicLightColorScheme
import androidx.compose.material3.lightColorScheme
import androidx.compose.runtime.Composable
import androidx.compose.ui.platform.LocalContext

private val DarkColorScheme = darkColorScheme(
    primary = Purple80,
    secondary = PurpleGrey80,
    tertiary = Pink80
)
private val LightColorScheme = lightColorScheme(
    primary = Purple40,
    secondary = PurpleGrey40,
    tertiary = Pink40
)

@Composable
fun StaffAppTheme(
    darkTheme: Boolean = isSystemInDarkTheme(),
    dynamicColor: Boolean = true,
    content: @Composable () -> Unit
) {
    val colorScheme = when {
        dynamicColor && Build.VERSION.SDK_INT >= Build.VERSION_CODES.S -> {
            val context = LocalContext.current
            if (darkTheme) dynamicDarkColorScheme(context) else dynamicLightColorScheme(context)
        }
        darkTheme -> DarkColorScheme
        else -> LightColorScheme
    }

    MaterialTheme(
        colorScheme = colorScheme,
        typography = Typography,
        content = content
    )
}

package com.college.staffapp.ui.theme

import androidx.compose.material3.Typography
import androidx.compose.ui.text.TextStyle
import androidx.compose.ui.text.font.FontFamily
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.sp

val Typography = Typography(
    bodyLarge = TextStyle(
        fontFamily = FontFamily.Default,
        fontWeight = FontWeight.Normal,
        fontSize = 16.sp,
        lineHeight = 24.sp,
        letterSpacing = 0.5.sp
    )
)

package com.college.staffapp.utils

import android.app.Notification
import android.app.NotificationChannel
import android.app.NotificationManager
import android.content.Context
import android.os.Build
import androidx.core.app.NotificationCompat
import com.college.staffapp.R

object AlertsManager {

    private const val CHANNEL_ID = "AlertsChannel"

    fun createNotificationChannel(context: Context) {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            val channel = NotificationChannel(
                CHANNEL_ID,
                "Attendance Alerts",
                NotificationManager.IMPORTANCE_HIGH
            )
            val manager = context.getSystemService(NotificationManager::class.java)
            manager?.createNotificationChannel(channel)
        }
    }

    fun showAlert(context: Context, title: String, message: String) {
        val notification = NotificationCompat.Builder(context, CHANNEL_ID)
            .setSmallIcon(R.drawable.ic_alert) // Corrected line
            .setContentTitle(title)
            .setContentText(message)
            .setPriority(NotificationCompat.PRIORITY_HIGH)
            .build()

        val manager = context.getSystemService(NotificationManager::class.java)
        manager?.notify((System.currentTimeMillis() % Int.MAX_VALUE).toInt(), notification)
    }
}

package com.college.staffapp.utils

import android.content.Context
import android.os.Environment
import android.widget.Toast
import com.google.firebase.database.FirebaseDatabase
import java.io.File
import java.io.FileWriter
import java.io.IOException

object AttendanceExportHelper {

    fun exportAttendanceLogs(context: Context, date: String) {
        val attendanceRef = FirebaseDatabase.getInstance().reference.child("attendance").child(date)

        attendanceRef.get().addOnSuccessListener { snapshot ->
            try {
                val exportDir = File(Environment.getExternalStorageDirectory(), "AttendanceExports")
                if (!exportDir.exists()) exportDir.mkdir()

                val file = File(exportDir, "Attendance_$date.csv")
                val writer = FileWriter(file)

                writer.append("Student ID, Period, Status\n")
                snapshot.children.forEach { periodSnapshot ->
                    val period = periodSnapshot.key
                    periodSnapshot.children.forEach { studentSnapshot ->
                        val studentID = studentSnapshot.key
                        val status = studentSnapshot.getValue(String::class.java)
                        writer.append("$studentID, $period, $status\n")
                    }
                }

                writer.flush()
                writer.close()
                Toast.makeText(context, "Attendance exported successfully.", Toast.LENGTH_LONG).show()
            } catch (e: IOException) {
                e.printStackTrace()
                Toast.makeText(context, "Failed to export attendance.", Toast.LENGTH_LONG).show()
            }
        }.addOnFailureListener {
            Toast.makeText(context, "Failed to fetch attendance data.", Toast.LENGTH_LONG).show()
        }
    }
}

package com.college.staffapp.utils

import com.google.firebase.database.DatabaseReference
import com.google.firebase.database.FirebaseDatabase

object FirebaseUtils {
    private val database: DatabaseReference = FirebaseDatabase.getInstance().reference

    fun getAttendanceLogs(): DatabaseReference {
        return database.child("attendance")
    }

    fun updateTimetable(day: String, period: String, subject: String, room: String) {
        database.child("timetable")
            .child(day)
            .child(period)
            .child("subject")
            .setValue(subject)
        database.child("timetable")
            .child(day)
            .child(period)
            .child("room")
            .setValue(room)
    }
}

package com.college.staffapp

import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.activity.enableEdgeToEdge
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.padding
import androidx.compose.material3.Scaffold
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Modifier
import androidx.compose.ui.tooling.preview.Preview
import com.college.staffapp.ui.theme.StaffAppTheme

class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        enableEdgeToEdge()
        setContent {
            StaffAppTheme {
                Scaffold(modifier = Modifier.fillMaxSize()) { innerPadding ->
                    Greeting(
                        name = "Android",
                        modifier = Modifier.padding(innerPadding)
                    )
                }
            }
        }
    }
}

@Composable
fun Greeting(name: String, modifier: Modifier = Modifier) {
    Text(
        text = "Hello $name!",
        modifier = modifier
    )
}

@Preview(showBackground = true)
@Composable
fun GreetingPreview() {
    StaffAppTheme {
        Greeting("Android")
    }
}
<?xml version="1.0" encoding="utf-8"?>
<shape xmlns:android="http://schemas.android.com/apk/res/android"
    android:shape="rectangle">
    <solid android:color="#FFFFFF"/>
    <stroke android:width="1dp" android:color="#CCCCCC"/>
    <corners android:radius="12dp"/>
</shape>
<vector xmlns:android="http://schemas.android.com/apk/res/android" android:height="24dp" android:tint="#000000" android:viewportHeight="24" android:viewportWidth="24" android:width="24dp">
      
    <path android:fillColor="@android:color/white" android:pathData="M10.01,21.01c0,1.1 0.89,1.99 1.99,1.99s1.99,-0.89 1.99,-1.99h-3.98zM18.88,16.82L18.88,11c0,-3.25 -2.25,-5.97 -5.29,-6.69v-0.72C13.59,2.71 12.88,2 12,2s-1.59,0.71 -1.59,1.59v0.72C7.37,5.03 5.12,7.75 5.12,11v5.82L3,18.94L3,20h18v-1.06l-2.12,-2.12zM16,13.01h-3v3h-2v-3L8,13.01L8,11h3L11,8h2v3h3v2.01z"/>
    
</vector>
<?xml version="1.0" encoding="utf-8"?>
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="108dp"
    android:height="108dp"
    android:viewportWidth="108"
    android:viewportHeight="108">
    <path
        android:fillColor="#3DDC84"
        android:pathData="M0,0h108v108h-108z" />
    <path
        android:fillColor="#00000000"
        android:pathData="M9,0L9,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,0L19,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M29,0L29,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M39,0L39,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M49,0L49,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M59,0L59,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M69,0L69,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M79,0L79,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M89,0L89,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M99,0L99,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,9L108,9"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,19L108,19"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,29L108,29"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,39L108,39"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,49L108,49"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,59L108,59"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,69L108,69"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,79L108,79"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,89L108,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,99L108,99"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,29L89,29"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,39L89,39"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,49L89,49"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,59L89,59"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,69L89,69"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,79L89,79"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M29,19L29,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M39,19L39,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M49,19L49,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M59,19L59,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M69,19L69,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M79,19L79,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
</vector>


<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="108dp"
    android:height="108dp"
    android:viewportWidth="108"
    android:viewportHeight="108">

    <path
        android:fillColor="#FFFFFF"
        android:pathData="M31,63.928c0,0 6.4,-11 12.1,-13.1c7.2,-2.6 26,-1.4 26,-1.4l38.1,38.1L107,108.928l-32,-1L31,63.928z" />

    <path
        android:fillColor="#FFFFFF"
        android:fillType="nonZero"
        android:pathData="M65.3,45.828l3.8,-6.6c0.2,-0.4 0.1,-0.9 -0.3,-1.1c-0.4,-0.2 -0.9,-0.1 -1.1,0.3l-3.9,6.7c-6.3,-2.8 -13.4,-2.8 -19.7,0l-3.9,-6.7c-0.2,-0.4 -0.7,-0.5 -1.1,-0.3C38.8,38.328 38.7,38.828 38.9,39.228l3.8,6.6C36.2,49.428 31.7,56.028 31,63.928h46C76.3,56.028 71.8,49.428 65.3,45.828zM43.4,57.328c-0.8,0 -1.5,-0.5 -1.8,-1.2c-0.3,-0.7 -0.1,-1.5 0.4,-2.1c0.5,-0.5 1.4,-0.7 2.1,-0.4c0.7,0.3 1.2,1 1.2,1.8C45.3,56.528 44.5,57.328 43.4,57.328L43.4,57.328zM64.6,57.328c-0.8,0 -1.5,-0.5 -1.8,-1.2s-0.1,-1.5 0.4,-2.1c0.5,-0.5 1.4,-0.7 2.1,-0.4c0.7,0.3 1.2,1 1.2,1.8C66.5,56.528 65.6,57.328 64.6,57.328L64.6,57.328z" />
</vector>
<vector xmlns:android="http://schemas.android.com/apk/res/android" android:autoMirrored="true" android:height="24dp" android:tint="#000000" android:viewportHeight="24" android:viewportWidth="24" android:width="24dp">

    <path android:fillColor="@android:color/white" android:pathData="M10.01,21.01c0,1.1 0.89,1.99 1.99,1.99s1.99,-0.89 1.99,-1.99h-3.98zM18.88,16.82L18.88,11c0,-3.25 -2.25,-5.97 -5.29,-6.69v-0.72C13.59,2.71 12.88,2 12,2s-1.59,0.71 -1.59,1.59v0.72C7.37,5.03 5.12,7.75 5.12,11v5.82L3,18.94L3,20h18v-1.06l-2.12,-2.12zM16,13.01h-3v3h-2v-3L8,13.01L8,11h3L11,8h2v3h3v2.01z"/>

</vector>

<?xml version="1.0" encoding="utf-8"?>
<shape xmlns:android="http://schemas.android.com/apk/res/android"
    android:shape="rectangle">
    <solid android:color="?attr/colorPrimary"/>
    <corners android:radius="16dp"/>
</shape>

<ScrollView xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent">

    <TextView
        android:id="@+id/tvLogs"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:padding="24dp"
        android:textIsSelectable="true"
        android:text="Attendance Logs"
        android:textAppearance="?attr/textAppearanceBodyLarge"/>
</ScrollView>

<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:gravity="center"
    android:orientation="vertical"
    android:padding="32dp">

    <Button
        android:id="@+id/btnAttendanceLogs"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="Attendance Logs"/>
    <Button
        android:id="@+id/btnTimetableEditor"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="Timetable Editor"
        android:layout_marginTop="12dp"/>
    <Button
        android:id="@+id/btnStartHotspot"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="Start Hotspot"
        android:layout_marginTop="12dp"/>
</LinearLayout>

<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:background="#FAFAFA"
    android:padding="24dp">

    <!-- Title -->
    <TextView
        android:id="@+id/tvLoginTitle"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:text="Phone Login"
        android:textSize="24sp"
        android:textStyle="bold"
        android:textColor="#333"
        android:gravity="center"
        app:layout_constraintTop_toTopOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent" />

    <!-- Phone Number Input -->
    <EditText
        android:id="@+id/etPhoneNumber"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:hint="Enter phone number"
        android:inputType="phone"
        android:padding="16dp"
        android:background="@drawable/edittext_bg"
        android:textColor="#000"
        android:textColorHint="#888"
        app:layout_constraintTop_toBottomOf="@+id/tvLoginTitle"
        android:layout_marginTop="32dp"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent" />

    <!-- Send OTP Button -->
    <Button
        android:id="@+id/btnSendOTP"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:text="Send OTP"
        android:textAllCaps="false"
        android:backgroundTint="#3F51B5"
        android:textColor="#FFF"
        android:layout_marginTop="16dp"
        android:padding="14dp"
        android:background="@drawable/rounded_button"
        app:layout_constraintTop_toBottomOf="@id/etPhoneNumber"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"/>

    <!-- OTP Input -->
    <EditText
        android:id="@+id/etOTP"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:hint="Enter OTP"
        android:inputType="number"
        android:padding="16dp"
        android:background="@drawable/edittext_bg"
        android:textColor="#000"
        android:textColorHint="#888"
        android:layout_marginTop="24dp"
        app:layout_constraintTop_toBottomOf="@id/btnSendOTP"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent" />

    <!-- Verify OTP Button -->
    <Button
        android:id="@+id/btnVerifyOTP"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:text="Verify OTP"
        android:textAllCaps="false"
        android:backgroundTint="#4CAF50"
        android:textColor="#FFF"
        android:padding="14dp"
        android:layout_marginTop="16dp"
        android:background="@drawable/rounded_button"
        app:layout_constraintTop_toBottomOf="@id/etOTP"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent" />
</androidx.constraintlayout.widget.ConstraintLayout>

<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:gravity="center"
    android:orientation="vertical"
    android:padding="32dp">

    <EditText
        android:id="@+id/etDay"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:hint="Day (e.g., Monday)"/>

    <EditText
        android:id="@+id/etPeriod"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:hint="Period (e.g., 1, 2, 3...)"/>

    <EditText
        android:id="@+id/etSubject"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:hint="Subject"/>

    <EditText
        android:id="@+id/etRoom"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:hint="Room"/>

    <Button
        android:id="@+id/btnSaveTimetable"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="Save Timetable Entry"/>
</LinearLayout>
<?xml version="1.0" encoding="utf-8"?>
<resources>
    <color name="purple_200">#FFBB86FC</color>
    <color name="purple_500">#FF6200EE</color>
    <color name="purple_700">#FF3700B3</color>
    <color name="teal_200">#FF03DAC5</color>
    <color name="teal_700">#FF018786</color>
    <color name="black">#FF000000</color>
    <color name="white">#FFFFFFFF</color>
</resources>

<resources>
    <string name="app_name">StaffApp</string>
</resources>

<?xml version="1.0" encoding="utf-8"?>
<resources>

    <style name="Theme.StaffApp" parent="android:Theme.Material.Light.NoActionBar" />
</resources>

<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    package="com.college.staffapp">

    <!-- Permissions -->
    <uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" />
    <uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION" />
    <uses-permission android:name="android.permission.ACCESS_WIFI_STATE" />
    <uses-permission android:name="android.permission.CHANGE_WIFI_STATE" />
    <uses-permission android:name="android.permission.INTERNET" />
    <uses-permission android:name="android.permission.FOREGROUND_SERVICE" />
    <uses-permission android:name="android.permission.RECEIVE_SMS"/>
    <uses-permission android:name="android.permission.READ_SMS"/>
    <uses-permission android:name="android.permission.NEARBY_WIFI_DEVICES" />
    <uses-permission android:name="android.permission.POST_NOTIFICATIONS" />


    <application
        android:allowBackup="true"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:theme="@style/Theme.StaffApp">

        <activity
            android:name=".activities.LoginActivity"
            android:theme="@style/Theme.AppCompat.Light.NoActionBar"
            android:exported="true">
            <intent-filter>
                <action android:name="android.intent.action.MAIN"/>
                <category android:name="android.intent.category.LAUNCHER"/>
            </intent-filter>
        </activity>
        <activity android:name=".activities.DashboardActivity"/>
        <activity android:name=".activities.AttendanceLogsActivity"/>
        <activity android:name=".activities.TimetableEditorActivity"/>
        <service android:name=".services.HotspotService" android:exported="false" />
    </application>
    <uses-feature android:name="android.hardware.telephony" android:required="false" />

</manifest>


plugins {
    id("com.android.application")
    id("com.google.gms.google-services")
    id("org.jetbrains.kotlin.android")
}

android {
    namespace = "com.college.staffapp"
    compileSdk = 34

    defaultConfig {
        applicationId = "com.college.staffapp"
        minSdk = 26
        targetSdk = 34
        versionCode = 1
        versionName = "1.0"
        testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner" // Added
    }

    buildTypes {
        release {
            isMinifyEnabled = true
            proguardFiles(getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro")
        }
        debug {
            applicationIdSuffix = ".debug"
            isDebuggable = true
        }
    }

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
        isCoreLibraryDesugaringEnabled = true // Added
    }

    kotlinOptions {
        jvmTarget = "17"
    }

    buildFeatures {
        viewBinding = true
        compose = true
    }
    composeOptions {
        kotlinCompilerExtensionVersion = "1.5.10"
    }
}

dependencies {
    // implementation("com.google.firebase:firebase-auth:23.2.0") // Removed - use latest version
    implementation("androidx.appcompat:appcompat:1.6.1")
    implementation("androidx.core:core-ktx:1.12.0")
    implementation("com.google.android.material:material:1.11.0")
    implementation("androidx.activity:activity-compose:1.8.2")
    implementation(platform("androidx.compose:compose-bom:2023.10.01"))

    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-android:1.7.3")
    implementation("androidx.compose.material3:material3")
    implementation("androidx.compose.ui:ui")
    implementation("androidx.compose.ui:ui-tooling-preview")
    debugImplementation("androidx.compose.ui:ui-tooling")

    // Firebase
    implementation(platform("com.google.firebase:firebase-bom:32.7.0"))
    implementation("com.google.firebase:firebase-auth")
    implementation("com.google.firebase:firebase-database")

    // Location Services
    implementation("com.google.android.gms:play-services-location:21.2.0")

    coreLibraryDesugaring("com.android.tools:desugar_jdk_libs:2.0.4") // Added
}

{
  "project_info": {
    "project_number": "587283484150",
    "firebase_url": "https://collegeattendancesystem-4a3cd-default-rtdb.firebaseio.com",
    "project_id": "collegeattendancesystem-4a3cd",
    "storage_bucket": "collegeattendancesystem-4a3cd.firebasestorage.app"
  },
  "client": [
    {
      "client_info": {
        "mobilesdk_app_id": "1:587283484150:android:7929f484908e9136228bd7",
        "android_client_info": {
          "package_name": "com.college.staffapp"
        }
      },
      "oauth_client": [],
      "api_key": [
        {
          "current_key": "AIzaSyDoglltbTeavKihmbBkE5me6IQQfGhco_M"
        }
      ],
      "services": {
        "appinvite_service": {
          "other_platform_oauth_client": []
        }
      }
    },
    {
      "client_info": {
        "mobilesdk_app_id": "1:587283484150:android:da61ee7aa464fe9c228bd7",
        "android_client_info": {
          "package_name": "com.college.staffapp.debug"
        }
      },
      "oauth_client": [],
      "api_key": [
        {
          "current_key": "AIzaSyDoglltbTeavKihmbBkE5me6IQQfGhco_M"
        }
      ],
      "services": {
        "appinvite_service": {
          "other_platform_oauth_client": []
        }
      }
    },
    {
      "client_info": {
        "mobilesdk_app_id": "1:587283484150:android:0b7da0a54a52a64c228bd7",
        "android_client_info": {
          "package_name": "com.college.studentapp"
        }
      },
      "oauth_client": [],
      "api_key": [
        {
          "current_key": "AIzaSyDoglltbTeavKihmbBkE5me6IQQfGhco_M"
        }
      ],
      "services": {
        "appinvite_service": {
          "other_platform_oauth_client": []
        }
      }
    },
    {
      "client_info": {
        "mobilesdk_app_id": "1:587283484150:android:b86c1254e03ca199228bd7",
        "android_client_info": {
          "package_name": "com.college.studentapp.debug"
        }
      },
      "oauth_client": [],
      "api_key": [
        {
          "current_key": "AIzaSyDoglltbTeavKihmbBkE5me6IQQfGhco_M"
        }
      ],
      "services": {
        "appinvite_service": {
          "other_platform_oauth_client": []
        }
      }
    }
  ],
  "configuration_version": "1"
}

-keepattributes Signature
-keepattributes *Annotation*
-keep class com.google.firebase.** { *; }
-keep class com.google.android.gms.** { *; }
-dontnote com.google.**
-dontwarn com.google.**
-keep class androidx.compose.runtime.** { *; }
-keep class kotlin.Metadata { *; }
-dontwarn org.jetbrains.annotations.**
-keep class com.college.staffapp.** { *; }

#Mon Apr 14 16:03:54 IST 2025
distributionBase=GRADLE_USER_HOME
distributionPath=wrapper/dists
distributionUrl=https\://services.gradle.org/distributions/gradle-8.4-bin.zip
zipStoreBase=GRADLE_USER_HOME
zipStorePath=wrapper/dists

buildscript {
    repositories {
        google()
        mavenCentral()
    }
    dependencies {
        classpath("com.android.tools.build:gradle:8.3.1")
        classpath("com.google.gms:google-services:4.4.1")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:1.9.22") // Update this line
    }
}

tasks.register("clean", Delete::class) {
    delete(rootProject.layout.buildDirectory)
}

org.gradle.jvmargs=-Xmx2048m -Dfile.encoding=UTF-8
android.useAndroidX=true
kotlin.code.style=official
android.suppressUnsupportedCompileSdk=34

pluginManagement {
    repositories {
        google()
        mavenCentral()
        gradlePluginPortal()
    }
}
dependencyResolutionManagement {
    repositoriesMode.set(RepositoriesMode.PREFER_SETTINGS)
    repositories {
        google()
        mavenCentral()
    }
}
rootProject.name = "StaffApp"
include(":app")
